shell-01-

1.变量
	linux中的变量分为系统变量和用户自定义变量
	可以通过set命令查看当前环境所有变量
	echo $vairableName 查看某一个变量
	常见的系统变量有：$HOME $PWD $SHELL $USER等
	其中$SHELL表示当前正在使用的解释器

	1.1 变量的定义
		变量=值(STR=abc)
		等号两侧不能有空格
		变量名称一般为大写
		双引号和单引号有区别，双引号仅将空格、杠n也会脱意；单引号会将所有特殊字符脱意（脱意的含义是不会转义），即单引号会把所有特殊变量当成字符串

		A=9
		unset A 即会撤销变量A
		readonly B=2 声明静态变量B=2，不能unset
		export 变量名 会把变量提升为全局变量，可供其他SHELL变量使用

		在这儿再进行一个说明：source /etc/profile 
		这样是把profile里边的export指令全部执行一遍

		将命令的返回值赋给变量
		A=`ls -la` 反引号，运行里边的命令，并把结果返回给变量A
		A=$(ls -la) 等价于反引号

	1.2 Shell 中的特殊变量
		$? 表示上一个命令退出的状态（有点类似与上一条命令的返回值，注意不是print出来的值）
			一般情况下上一条命令如果执行成功会返回一个0
			执行失败的话会返回一个大于0得数
			再举一个例子

			[root@localhost ~]# true
			[root@localhost ~]# echo $?
			0
			[root@localhost ~]# false
			[root@localhost ~]# echo $?
			1

			这说明true 返回了0
			而false 返回了1
			即如果是个有返回值的话，拿到的就是他返回的那个值

		$$ 表示当前进程编号
			[root@localhost ~]# echo $$
			2969

		$0 表示当前脚本名称
			在脚本中写：
			echo $0 
			运行脚本时会返回当前脚本名称

		$n 表示n位置的输入参数（n代表数字，n>1）
			#下边是一个简单的shell脚本
			#!/bin/bash
			aa="hello"
			echo "第一个参数：="$1
			echo "第二个参数：="$2

			运行命令有：
			[root@localhost ~]# ./testdot.sh a b
			第一个参数：=a
			第二个参数：=b

			但是这个有一个缺点是自己不知道人家给了几个参数，这样字的话可以考虑下边两个变量

		$# 表示参数的个数，常用语循环
		$*和$@ 都表示参数列表
			#!/bin/bash
			echo '$*'
			for p in $*
			do
			echo $p
			done

			echo '$@'
			for p in $@
			do
			echo $p
			done 

			[root@localhost ~]# ./testdot.sh hello world
			$*
			hello
			world
			$@
			hello
			world
		另外需要注意$*和$@的区别
		$* 和 $@ 都表示传递给函数或脚本的所有参数，不被双引号" "包含时，都以$1 $2 … $n 
		的形式输出所有参数
		当它们被双引号" "包含时，"$*" 会将所有的参数作为一个整体，以"$1 $2 … $n"的形式
		输出所有参数；"$@" 会将各个参数分开，以"$1" "$2" … "$n" 的形式输出所有参数。

2.运算符
	格式 :expr m + n 或$((m+n)) 注意expr运算符间要有空格
	例如计算(2+3)*4的值
	2.1	分步计算
		S=`expr 2 + 3`	expr $S \* 4
	2.2	一步完成计算
		expr `expr 2 + 3 ` \* 4
		echo `expr \`expr 2 + 3\` \* 4`
		或
		$(((2+3)*4))

3.for循环
	3.1 第一种：
		for N in 1 2 3
		do
			echo $N
		done
		或
		for N in 1 2 3; do echo $N; done
		或
		for N in {1..3}; do echo $N; done
	3.2 第二种：
		for ((i = 0; i <= 5; i++))
		do
			echo "welcome $i times"
		done
		或
		for ((i = 0; i <= 5; i++)); do echo "welcome $i times"; done

4.while循环
	4.1 第一种
		while expression
		do
		command
		…
		done
	说明：后边的那个expression是一个布尔表达式
	[root@localhost ~]# while [ 2 -gt -1 ]; do echo aaa; done
	用于字符串的判断符（注意只有一个等于号）
	=
	用于数字的判断符
	gt 表示的是great than 表示大于
	lt 表示的是less than 表示小于
	eq 表示的是equal than 表示等于
	le 表示的是less equal 表示小于等于
	ge 表示的是great equal 表示的是大于等于
	ne 表示得是no equal 表示的是不等于
	4.2 第二种
		i=1
		while ((i<=3))
		do
		  echo $i
		  let i++
		done

5.case语句
	case $1 in
	start)
		echo "starting"
		;;
	stop)
		echo "stoping"
		;;
	*)
		echo "Usage: {start|stop} “
	esac

	说明：如果第一个参数等于start则echo starting，stop类似，最后那个是默认的，最后那个符号是
	case反过来，表示case的结束

6.read命令
	read -p(提示语句)-n(字符个数) -t(等待时间) 
	read -p "please input your name: " NAME

	示例：
	[root@localhost ~]# read -p "please enter a number:" numb
	please enter a number:18
	[root@localhost ~]# echo $numb
	18

7.if命令
	语法：
	if condition
		then
			statements
		[elif condition 
			then statements. ..] 
		[else    
			statements ] 
	fi
	例子：
	#!/bin/bash
	read -p "please input your name:" NAME
	#printf '%s\n' $NAME
	if [ $NAME = root ]
        then
            echo "hello ${NAME},  welcome !"
        elif [ $NAME = itcast ]
            then
                echo "hello ${NAME},  welcome !"
        else
            echo "SB, get out here !"
	fi

	注意：
	[ condition ] (注意condition前后要有空格)
	非空返回true，可使用$?验证（0为true，>1为false）
	#空返回false

	[root@localhost ~]# [ str ]
	[root@localhost ~]# echo $?
	0
	[root@localhost ~]# [ ] 
	[root@localhost ~]# echo $?
	1

	[ condition ] && echo OK || echo notok
	如果condition条件成立执行&&后边的echo OK
	如果condition条件不成立则执行||后边的echo notok
	也可以这么单独使用
	[ condition ] && echo OK


	-r 有读的权限
	-w 有写的权限
	-x 有执行的权限
	-f 文件存在并且是一个常规的文件
	-s 文件存在且不为空
	-d 文件存在并是一个目录
	-b文件存在并且是一个块设备
	-L 文件存在并且是一个链接

	例子；
	[root@localhost ~]# [ -f apps ]
	[root@localhost ~]# echo $?
	1

8. Shell自定义函数
	语法
	一共有三种定义方式：
	第一种：
	function funcname(){
		action;
		[return int;]
	}

	第二种：
	function funcname{
	...
	}

	第三种：
	funcname(){
	...
	}

	即如果不带function的话，函数名是一定要加上括号的。

