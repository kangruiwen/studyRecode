第二天复习
复习内容：线程池、Callable、BlockQueue

1. 线程池
	
	1.1 简介：

	1.2 线程池常见的5种创建方式：

		Single Thread Executor 
			只有一个线程的线程池，因此所有提交的任务是顺序执行.
			创建方式：Executors.newSingleThreadExecutor()

		Cached Thread Pool 
			线程池里有很多线程需要同时执行，老的可用线程将被新的任务触发重新执行，如果线程超
		过60秒内没执行，那么将被终止并从池中删除.
			创建方式：Executors.newCachedThreadPool()

		Fixed Thread Pool 
			拥有固定线程数的线程池，如果没有任务执行，那么线程会一直等待
			创建方式：Executors.newFixedThreadPool(4)
			在构造函数中的参数4是线程池的大小，你可以随意设置，也可以和cpu的核数量保持一致，这
		点应该注意，线程池大小的设定是根据硬件资源和环境需求而动态的改变的，如需求我们应看是计
		算密集型的还是IO密集型的。
		获取cpu的核数量 int cpuNums = Runtime.getRuntime().availableProcessors();

		Scheduled Thread Pool : 
			用来调度即将执行的任务的线程池，可能是不是直接执行, 每隔多久执行一次... 策略型的
			创建方式：Executors.newScheduledThreadPool()

		Single Thread Scheduled Pool
			只有一个线程，用来调度任务在指定时间执行
			创建方式：Executors.newSingleThreadScheduledExecutor()



2. Callable 的使用
	2.1 简介 
		常规方式我们建立一个线程是继承 Thread 或者实现 Runnable 接口，但是这两个调用run方法都
	没有返回值，如果我们需要拿到返回值，通常都是通过共享变量或者线程之间的通信来达到一个效果，
	而在某些场合，这样子取又会影响到效率。这时我们就可以使用 Callable接口来进行实现。
		Callable接口类似于Runnable，从名字就可以看出来了，但是Runnable不会返回结果，并且无法
	抛出返回结果的异常，而Callable功能更强大一些，被线程执行后，可以返回值，这个返回值可以被
	uture拿到，也就是说，Future可以拿到异步执行任务的返回值，
		Callable 和 Future 一个产生结果，一个拿到结果。
	2.2 API
		public interface Callable<V> {
		    /**
		     * Computes a result, or throws an exception if unable to do so.
		     * @return computed result
		     * @throws Exception if unable to compute a result
		     */
		    V call() throws Exception;
		}

	2.3 Callable的使用
		一般情况下是配合ExecutorService来使用的:<T> Future<T> submit(Callable<T> task);
		Callable 跟 Runnable 的区别：
		Runnable 的 run 方法不会有任何返回结果，所以主线程无法获得任务线程的返回值
		Callable 的 call 方法可以返回结果，但是主线程在获取时是被阻塞，需要等待任务线程返回才能
		拿到结果

		public class ThreadPoolWithcallable {
			public static void main(String[] args) throws InterruptedException, ExecutionException {
				ExecutorService pool = Executors.newFixedThreadPool(4); 
				for(int i = 0; i < 10; i++){
					Future<String> submit = pool.submit(new Callable<String>(){
						@Override
						public String call() throws Exception {
							//System.out.println("a");
							Thread.sleep(5000);
							return "b--"+Thread.currentThread().getName();
						}
				   });
					//从Future中get结果，这个方法是会被阻塞的，一直要等到线程任务返回结果
					System.out.println(submit.get());
				} 
				pool.shutdown();
			}
		}

3. BlockQueue 的使用

	3.1 简介
		BlockingQueue也是java.util.concurrent下的主要用来控制线程同步的工具接口。是一个队列了
	3.2 常用API
		主要方法是put、take一对阻塞存取；add、poll一对非阻塞存取。
		3.2.1 插入：
			add(anObject):把anObject加到BlockingQueue里,即如果BlockingQueue可以容纳,则返回
		true,否则抛出异常,不好
        	offer(anObject):表示如果可能的话,将anObject加到BlockingQueue里,即如果BlockingQueue
        可以容纳,则返回true,否则返回false.
       		put(anObject):把anObject加到BlockingQueue里,如果BlockQueue没有空间,则调用此方法的线
       	程被阻断直到BlockingQueue里面有空间再继续, 有阻塞, 放不进去就等待
       	3.2.2 读取
   		 	poll(time):取走BlockingQueue里排在首位的对象,若不能立即取出,则可以等time参数规定的
   		 时间,取不到时返回null; 取不到返回null
        	take():取走BlockingQueue里排在首位的对象,若BlockingQueue为空,阻断进入等待状态直到
        Blocking有新的对象被加入为止; 阻塞, 取不到就一直等
        3.2.3 其他
        	int remainingCapacity();返回队列剩余的容量，在队列插入和获取的时候，不要乱用，
    	数据可能不准, 不能保证数据的准确性
			boolean remove(Object o); 从队列移除元素，如果存在，即移除一个或者更多，队列改变了
		返回true
			public boolean contains(Object o); 查看队列是否存在这个元素，存在返回true
			int drainTo(Collection<? super E> c);  移除此队列中所有可用的元素,并将它们添加到给
		定 collection 中。取出放到集合中
			int drainTo(Collection<? super E> c, int maxElements); 和上面方法的区别在于指定了移动
		的数量; 取出指定个数放到集合
	3.3 常用实现
		3.3.1 ArrayBlockingQueue 
			一个由数组支持的有界阻塞队列，规定大小的BlockingQueue,其构造函数必须带一个int参数
		来指明其大小.其所含的对象是以FIFO(先入先出)顺序排序的。
		3.3.2 LinkedBlockingQueue 
			大小不定的BlockingQueue,若其构造函数带一个规定大小的参数,生成的BlockingQueue有大小
		限制,若不带大小参数,所生成的BlockingQueue的大小由Integer.MAX_VALUE来决定.其所含的对象是
		以FIFO(先入先出)顺序排序的。 
			LinkedBlockingQueue 可以指定容量，也可以不指定，不指定的话，默认最大是Integer.MAX_VALUE,
		其中主要用到put和take方法，put方法在队列满的时候会阻塞直到有队列成员被消费，take方法在
		队列空的时候会阻塞，直到有队列成员被放进来。
	3.4 使用（常用作与一个生产者消费中模式中）
		puiblic class Producer<T> implements Rrunnable{
			BlockQueue<T> queue;
			public class Producer(BlockQueue<T> queue) {
				this.queue = queue;
			}
			public void run() {
				queue.put(T); // queue 满了会发生阻塞
			}
		}

		puiblic class Consumer<T> implements Rrunnable{
			BlockQueue<T> queue;
			public class Consumer(BlockQueue<T> queue) {
				this.queue = queue;
			}
			public void run() {
				queue.take(T)// queue 空了会发生阻塞
			}
		}

		publc class Test() {
			// 生产者生产数据，消费者消费数据 .... 	
		}


